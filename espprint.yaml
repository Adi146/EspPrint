esphome:
  name: espprint
  platform: ESP32
  board: nodemcu-32s
  includes:
    - src/gcode_sender.h
    - src/sd_gcode_sender.h
    - src/gcode_reader.h
    - src/gcode_reader_sensors.h
    - src/upload_server.h
    - src/ring_buffer.h
    - src/memory_sensor.h
  on_boot:
    - lambda: SD_MMC.begin();
    - lambda: get_sender(id(gcode_sender))->sendGCodeForce("M110 N0");
    - lambda: get_sender(id(gcode_sender))->sendGCode("M117 Hello There");
    - lambda: get_sender(id(gcode_sender))->sendGCode("M27 S4");
    - lambda: get_sender(id(gcode_sender))->sendGCode("M155 S4");

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Printer Fallback Hotspot"
    password: !secret fallback_password

captive_portal:

# Enable logging
logger:
  baud_rate: 0
  level: INFO

# Enable Home Assistant API
api:
  services:
    - service: home
      then:
        - lambda: get_sdSender(id(gcode_sender))->sendGCode("G28");
    - service: send_gcode
      variables:
        gcode: string
      then:
        - lambda: get_sdSender(id(gcode_sender))->sendGCodeForce(gcode);
    - service: print_file
      variables:
        file: string
      then:
        - lambda: get_sdSender(id(gcode_sender))->print(file);
    - service: cancle_print
      then:
        - lambda: get_sdSender(id(gcode_sender))->stop();

ota:

web_server_base:
  id: upload_server_base

uart:
  id: uart_bus
  tx_pin: GPIO1
  rx_pin: GPIO3
  baud_rate: 115200

custom_component:
- id: gcode_sender
  lambda: |-
    auto sender = new SDGCodeSender(id(uart_bus), SD_MMC);
    return {sender};
- id: gcode_reader
  lambda: |-
    auto reader = new GCodeReaderSensors(id(uart_bus), get_sdSender(id(gcode_sender)), 2);
    return {reader};
- id: upload_server
  lambda: |-
    auto upload = new UploadServer(id(upload_server_base), SD_MMC);
    App.register_component(upload);
    return {upload};

sensor:
- platform: custom
  lambda: |-
    auto reader = get_readerSensors(id(gcode_reader));
    return reader->temperatures;
  sensors:
  - name: "Tool Current Temperature"
    unit_of_measurement: 째C
    accuracy_decimals: 2
  - name: "Tool Target Temperature"
    unit_of_measurement: 째C
    accuracy_decimals: 2
  - name: "Bed Current Temperature"
    unit_of_measurement: 째C
    accuracy_decimals: 2
  - name: "Bed Target Temperature"
    unit_of_measurement: 째C
    accuracy_decimals: 2
- platform: custom
  lambda: |-
    auto sender = get_sdSender(id(gcode_sender));
    return {&sender->printProgress, &sender->remainingTime};
  sensors:
  - name: "Print Progress"
    unit_of_measurement: "%"
  - name: "Remaining Time"
    unit_of_measurement: "min"
- platform: uptime
  name: Uptime
- platform: custom
  lambda: |-
    auto memory = new MemorySensor();
    App.register_component(memory);
    return {memory};
  sensors:
  - name: "ESP Free Memory"
    unit_of_measurement: "bytes"
- platform: custom
  lambda: |-
    auto reader = get_readerSensors(id(gcode_reader));
    return {&reader->resends};
  sensors:
  - name: "Print Resends"
    unit_of_measurement: "number"    

text_sensor:
- platform: custom
  lambda: |-
    auto reader = get_readerSensors(id(gcode_reader));
    return {&reader->lastAction};
  text_sensors:
  - name: "Last Action"

<<: !include camera.yaml