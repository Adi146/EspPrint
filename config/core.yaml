# these are the core components of ESPPrint. Most are used for basic GCode communication.
# other packages may depend on components of this package.

esphome:
  includes:
    - src/util/
    - src/core/analyzer/gcode_analyzer.h
  libraries:
    - ArduinoJson-esphomelib
  on_boot:
    # wait until printer is up and running
    - delay: 4s
    # initialize gcode sender module
    - lambda: id(gcode_sender)->reset();
    # enable auto temperature report
    - lambda: id(gcode_sender)->sendGCode("M155 S4");

external_components:
  - source:
      type: local
      path: src/components

GCodeQueue:
  id: queue

# core components for sending GCodes
GCodeSender:
  id: gcode_sender
  uart_id: uart_bus
  resend_buffer_size: 8

# core component for receiving GCode responses
GCodeReader:
  id: gcode_reader
  uart_id: uart_bus

# forwards sent and received GCodes to Home Assistant for terminal card
GCodeEvents:

sensor:
- platform: M73_Progress
  name: "${printer_name} Print Progress"
- platform: M73_RemainingTime
  name: "${printer_name} Remaining Time"

#
#climate:
## temperature control of hotends and heated bed
#- platform: custom
#  lambda: |-
#    auto temperature = new core::analyzer::TemperatureSensor(2, get_sender(id(gcode_sender)));
#    get_analyzerQueue(id(queue))->addSensor(temperature);
#    return temperature->getClimates();
#  climates:
#  - name: "${printer_name} Tool Temperature"
#    id: tool_temp
#    visual:
#      min_temperature: 0 °C
#      max_temperature: 250 °C
#      temperature_step: 1 °C
#  - name: "${printer_name} Bed Temperature"
#    id: bed_temp
#    visual:
#      min_temperature: 0 °C
#      max_temperature: 80 °C
#      temperature_step: 1 °C
#
#sensor:
## sensors for estimated print time and print progress.
## these will update with M73 commands
#- platform: custom
#  lambda: |-
#    auto progress = new core::analyzer::ProgressSensor();
#    get_analyzerQueue(id(queue))->addSensor(progress);
#    return {&progress->m_printProgress, &progress->m_remainingTime};
#  sensors:
#  - name: "${printer_name} Print Progress"
#    unit_of_measurement: "%"
#  - name: "${printer_name} Remaining Time"
#    unit_of_measurement: "min"