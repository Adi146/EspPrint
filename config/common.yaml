custom_component:
- id: gcode_sender
  lambda: |-
    auto sender = new SDGCodeSender(id(uart_bus), 4, SD_MMC);
    return {sender};
- id: gcode_reader
  lambda: |-
    auto reader = new GCodeReader(id(uart_bus), get_sdSender(id(gcode_sender)));
    return {reader};
- id: upload_server
  lambda: |-
    auto upload = new util::UploadServer(id(upload_server_base), get_sdSender(id(gcode_sender)));
    App.register_component(upload);
    return {upload};
- id: events
  lambda: |-
    auto sendEvents = new sensors::GCodeEvents("${printer_name_short}", "SEND", get_sdSender(id(gcode_sender)));
    auto receiveEvents = new sensors::GCodeEvents("${printer_name_short}", "RECV", get_sdSender(id(gcode_sender)));
    App.register_component(sendEvents);
    App.register_component(receiveEvents);
    get_sdSender(id(gcode_sender))->addSensor(sendEvents);
    get_reader(id(gcode_reader))->addSensor(receiveEvents);
    return {sendEvents, receiveEvents};

sensor:
- platform: custom
  lambda: |-
    auto temperature = new sensors::TemperatureSensor(2);
    get_reader(id(gcode_reader))->addSensor(temperature);
    return temperature->m_temperatures;
  sensors:
  - name: "${printer_name} Tool Current Temperature"
    unit_of_measurement: 째C
    accuracy_decimals: 2
  - name: "${printer_name} Tool Target Temperature"
    unit_of_measurement: 째C
    accuracy_decimals: 2
  - name: "${printer_name} Bed Current Temperature"
    unit_of_measurement: 째C
    accuracy_decimals: 2
  - name: "${printer_name} Bed Target Temperature"
    unit_of_measurement: 째C
    accuracy_decimals: 2
- platform: custom
  lambda: |-
    auto progress = new sensors::ProgressSensor();
    get_sdSender(id(gcode_sender))->addSensor(progress);
    return {&progress->m_printProgress, &progress->m_remainingTime};
  sensors:
  - name: "${printer_name} Print Progress"
    unit_of_measurement: "%"
  - name: "${printer_name} Remaining Time"
    unit_of_measurement: "min"

text_sensor:
- platform: custom
  lambda: |-
    auto action = new sensors::ActionSensor();
    get_reader(id(gcode_reader))->addSensor(action);
    return {action};
  text_sensors:
  - name: "${printer_name} Current Action"
- platform: custom
  lambda: |-
    auto file = new sensors::FileSensor(get_sdSender(id(gcode_sender)));
    App.register_component(file);
    return {file};
  text_sensors:
  - name: "${printer_name} Current File"