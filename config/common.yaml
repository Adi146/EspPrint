custom_component:
- id: gcode_sender
  lambda: |-
    auto sender = new storage::SDGCodeSender(id(uart_bus), 4, SD_MMC);
    return {sender};
- id: gcode_reader
  lambda: |-
    auto reader = new GCodeReader(id(uart_bus), get_sdSender(id(gcode_sender)));
    return {reader};
- id: upload_server
  lambda: |-
    auto upload = new storage::UploadServer(id(upload_server_base), get_sdSender(id(gcode_sender)));
    App.register_component(upload);
    return {upload};
- id: events
  lambda: |-
    auto events = new sensors::GCodeEvents("${printer_name_short}");
    App.register_component(events);
    get_sdSender(id(gcode_sender))->addSensor(events);
    get_reader(id(gcode_reader))->addSensor(events);
    return {events};

climate:
- platform: custom
  lambda: |-
    auto temperature = new sensors::TemperatureSensor(2, get_sdSender(id(gcode_sender)));
    get_reader(id(gcode_reader))->addSensor(temperature);
    return temperature->getClimates();
  climates:
  - name: "${printer_name} Tool Temperature"
    id: tool_temp
    visual:
      min_temperature: 0 °C
      max_temperature: 250 °C
      temperature_step: 1 °C
  - name: "${printer_name} Bed Temperature"
    id: bed_temp
    visual:
      min_temperature: 0 °C
      max_temperature: 80 °C
      temperature_step: 1 °C

sensor:
- platform: custom
  lambda: |-
    auto progress = new sensors::ProgressSensor();
    get_sdSender(id(gcode_sender))->addSensor(progress);
    return {&progress->m_printProgress, &progress->m_remainingTime};
  sensors:
  - name: "${printer_name} Print Progress"
    unit_of_measurement: "%"
  - name: "${printer_name} Remaining Time"
    unit_of_measurement: "min"

text_sensor:
- platform: custom
  lambda: |-
    auto action = new sensors::ActionSensor();
    get_reader(id(gcode_reader))->addSensor(action);
    return {action};
  text_sensors:
  - name: "${printer_name} Current Action"
- platform: custom
  lambda: |-
    auto file = new sensors::FileSensor(get_sdSender(id(gcode_sender)));
    App.register_component(file);
    return {file};
  text_sensors:
  - name: "${printer_name} Current File"